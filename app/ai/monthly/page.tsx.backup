'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import Link from 'next/link'
import { supabase } from '../../../lib/supabase'
import { Button } from '../../../components/ui/Button'
import { Input } from '../../../components/ui/Input'
import { 
  CalendarDays,
  Calendar,
  Sparkles,
  Instagram,
  Facebook,
  ArrowLeft,
  Clock,
  CheckCircle,
  FileText,
  Hash,
  Image as ImageIcon,
  TrendingUp,
  RotateCcw
} from 'lucide-react'


interface MonthlyPost {
  id: string
  week: number
  day: number
  theme: string
  caption: string
  hashtags: string[]
  imagePrompt: string
  status: 'pending' | 'generated' | 'approved'
  selectedImage?: any | null
  selectedImages?: any[]
  scheduledFor?: string
}

export default function MonthlyPage() {
  const [posts, setPosts] = useState<MonthlyPost[]>([])
  const [loading, setLoading] = useState(false)
  const [generating, setGenerating] = useState(false)
  const [platform, setPlatform] = useState<'instagram' | 'facebook'>('instagram')
  const [error, setError] = useState('')
  const [success, setSuccess] = useState('')
  const [media, setMedia] = useState<any[]>([])
  const [mediaLoading, setMediaLoading] = useState(false)
  const [mediaError, setMediaError] = useState('')
  const [imageSelections, setImageSelections] = useState<{ [date: string]: any[] }>({})
  const [mediaModalDate, setMediaModalDate] = useState<string | null>(null)
  const [userProfile, setUserProfile] = useState<any>(null)
  const [editingPost, setEditingPost] = useState<string | null>(null)
  const [editCaption, setEditCaption] = useState('')
  const [editHashtags, setEditHashtags] = useState('')
  const [editScheduledFor, setEditScheduledFor] = useState<string | null>(null)
  const [enhancingImage, setEnhancingImage] = useState<{ [postId: string]: { [imageIndex: number]: boolean } }>({})
  const [enhancedImages, setEnhancedImages] = useState<{ [postId: string]: { [imageIndex: number]: string } }>({})
  const [showEnhancedImages, setShowEnhancedImages] = useState<{ [postId: string]: { [imageIndex: number]: boolean } }>({})
  const [contentGenerated, setContentGenerated] = useState(false)
  const [modalSelectedImages, setModalSelectedImages] = useState<any[]>([])
  
  const router = useRouter()

  // Carousel state for each post
  const [sliderRefs, setSliderRefs] = useState<{ [postId: string]: any }>({})

  const themes = [
    'Product Showcase',
    'Behind the Scenes',
    'Customer Testimonials',
    'Educational Content',
    'Lifestyle',
    'Promotional',
    'User Generated Content',
    'Industry Insights',
    'Team Spotlight',
    'Company Culture',
    'Tips & Tricks',
    'Success Stories'
  ]

  // Helper to get the next 30 real calendar days (local time) - moved inside component
  function getNext30Days() {
    const days: { dayName: string; date: string; dateObj: Date }[] = [];
    const today = new Date();
    const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
    
    for (let i = 0; i < 30; i++) {
      const d = new Date(today);
      d.setDate(today.getDate() + i);
      const dayName = dayNames[d.getDay()];
      const dateStr = `${d.getDate()} ${monthNames[d.getMonth()]} ${d.getFullYear()}`;
      days.push({ dayName, date: dateStr, dateObj: d });
    }
    return days;
  }
  
  const next30Days = getNext30Days();

  useEffect(() => {
    initializeMonthlyPosts()
    fetchMedia()
    fetchUserProfile()
  }, [])

  const fetchUserProfile = async () => {
    try {
      const { data: { user } } = await supabase.auth.getUser()
      if (user) {
        const { data: profile } = await supabase
          .from('user_profiles')
          .select('*')
          .eq('user_id', user.id)
          .single()
        
        if (profile) {
          console.log('Fetched user profile:', profile)
          setUserProfile(profile)
        } else {
          console.log('No user profile found for user:', user.id)
        }
      }
    } catch (error) {
      console.error('Error fetching user profile:', error)
    }
  }

  const initializeMonthlyPosts = () => {
    const monthlyPosts: MonthlyPost[] = []
    for (let week = 1; week <= 4; week++) {
      for (let day = 1; day <= 7; day++) {
        monthlyPosts.push({
          id: `week-${week}-day-${day}`,
          week,
          day,
          theme: '',
          caption: '',
          hashtags: [],
          imagePrompt: '',
          status: 'pending'
        })
      }
    }
    setPosts(monthlyPosts)
  }

  const fetchMedia = async () => {
    setMediaLoading(true)
    setMediaError('')
    try {
      const { data: { user } } = await supabase.auth.getUser()
      if (!user) return
      const { data, error } = await supabase
        .from('media')
        .select('*')
        .eq('user_id', user.id)
        .order('created_at', { ascending: false })
      if (error) throw error
      setMedia(data || [])
    } catch (err: any) {
      setMediaError(err.message)
    } finally {
      setMediaLoading(false)
    }
  }

  const startEditing = (postId: string, caption: string, hashtags: string[], scheduledFor?: string) => {
    setEditingPost(postId)
    setEditCaption(caption)
    setEditHashtags(hashtags.join(' '))
    setEditScheduledFor(scheduledFor ? new Date(scheduledFor).toISOString().slice(0, 16) : '')
  }

  const saveEdit = (postId: string) => {
    const hashtagsArray = editHashtags
      .split(' ')
      .filter(tag => tag.trim() !== '')
      .map(tag => tag.startsWith('#') ? tag : `#${tag}`)

    setPosts(prevPosts => 
      prevPosts.map(post => 
        post.id === postId 
          ? { ...post, caption: editCaption, hashtags: hashtagsArray, scheduledFor: editScheduledFor ? new Date(editScheduledFor).toISOString() : post.scheduledFor }
          : post
      )
    )
    setEditingPost(null)
    setEditCaption('')
    setEditHashtags('')
    setEditScheduledFor(null)
  }

  const cancelEdit = () => {
    setEditingPost(null)
    setEditCaption('')
    setEditHashtags('')
    setEditScheduledFor(null)
  }

  const generateMonthlyContent = async () => {
    if (!userProfile) {
      setError('Please complete your profile setup first')
      return
    }

    // Check if user has completed their business profile
    if (!userProfile.business_name || userProfile.business_name === '') {
      setError('Please complete your business profile setup first. Go to Settings to add your business details.')
      return
    }

    if (Object.values(imageSelections).flat().length === 0) {
      setError('Please select at least one image to generate content')
      return
    }

    setGenerating(true)
    setError('')
    setSuccess('')

    // Get user for Authorization header
    const { data: { user } } = await supabase.auth.getUser();

    try {
      console.log('Sending userProfile to API:', userProfile)
      // Call the server-side API to generate content
      const response = await fetch('/api/generate-monthly-content', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          ...(user?.id ? { 'Authorization': `Bearer ${user.id}` } : {})
        },
        body: JSON.stringify({
          imageSelections,
          userProfile,
          platform
        })
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || 'Failed to generate content')
      }

      const data = await response.json()
      console.log('Generated monthly content:', data.generatedPosts)

      // Update posts with generated content
      const updatedPosts = posts.map((post, index) => {
        const dayKey = next30Days[index]?.date
        const selectedImages = imageSelections[dayKey]
        
        // Only update posts with images
        if (!selectedImages || selectedImages.length === 0) {
          return {
            ...post,
            status: 'pending' as const,
            selectedImage: null
          }
        }

        // Find the generated content for this day
        const generatedPost = data.generatedPosts.find((gp: any) => gp.dateKey === dayKey)
        
        if (generatedPost) {
          return {
            ...post,
            theme: generatedPost.theme,
            caption: generatedPost.caption,
            hashtags: generatedPost.hashtags,
            imagePrompt: generatedPost.imagePrompt,
            status: 'generated' as const,
            selectedImage: selectedImages[0],
            selectedImages: selectedImages, // Store all selected images
            scheduledFor: generatedPost.scheduledFor
          }
        }

        // Fallback if no generated content found
        return {
          ...post,
          status: 'pending' as const,
          selectedImage: selectedImages[0],
          selectedImages: selectedImages // Store all selected images
        }
      })

      setPosts(updatedPosts)
      setSuccess('Monthly content generated successfully!')
      
      // Clear the image selections and mark content as generated
      setImageSelections({})
      setContentGenerated(true)
    } catch (error: any) {
      console.error('Error generating monthly content:', error)
      setError(error.message || 'Failed to generate content. Please try again.')
    } finally {
      setGenerating(false)
    }
  }

  const saveMonthlyContent = async () => {
    setLoading(true)
    setError('')

    try {
      const { data: { user } } = await supabase.auth.getUser()
      if (!user) throw new Error('User not authenticated')

      // Save only generated posts with images
      const postsToSave = posts
        .filter(post => post.status === 'generated' && (post.selectedImage || (post.selectedImages && post.selectedImages.length > 0)))
        .map(post => {
          // Determine if this is a carousel post
          const isCarousel = post.selectedImages && post.selectedImages.length > 1
          const mediaUrls = isCarousel ? post.selectedImages!.map(img => img.file_path) : []
          const mediaUrl = isCarousel ? post.selectedImages![0].file_path : post.selectedImage?.file_path
          
          return {
            user_id: user.id,
            caption: post.caption,
            hashtags: post.hashtags,
            platform: platform,
            status: 'draft',
            scheduled_for: post.scheduledFor || getNextMonthDate(post.week, post.day),
            media_url: mediaUrl,
            media_urls: mediaUrls,
            theme: post.theme,
            content_type: 'monthly',
            business_context: `Week: ${post.week}, Day: ${post.day}, Image Prompt: ${post.imagePrompt}`
          }
        })

      if (postsToSave.length === 0) {
        setError('No posts to save. Please generate content first.')
        return
      }

      const { error } = await supabase
        .from('posts')
        .insert(postsToSave)

      if (error) throw error

      setSuccess('Monthly content saved successfully!')
      setTimeout(() => {
        router.push('/calendar')
      }, 2000)
    } catch (error: any) {
      setError(error.message)
    } finally {
      setLoading(false)
    }
  }

  const scheduleMonthlyContent = async () => {
    setLoading(true)
    setError('')

    try {
      const { data: { user } } = await supabase.auth.getUser()
      if (!user) throw new Error('User not authenticated')

      // Schedule only generated posts with images
      const postsToSchedule = posts
        .filter(post => post.status === 'generated' && (post.selectedImage || (post.selectedImages && post.selectedImages.length > 0)))
        .map(post => {
          // Determine if this is a carousel post
          const isCarousel = post.selectedImages && post.selectedImages.length > 1
          const mediaUrls = isCarousel ? post.selectedImages!.map(img => img.file_path) : []
          const mediaUrl = isCarousel ? post.selectedImages![0].file_path : post.selectedImage?.file_path
          
          return {
            user_id: user.id,
            caption: post.caption,
            hashtags: post.hashtags,
            platform: platform,
            status: 'scheduled',
            scheduled_for: post.scheduledFor || getNextMonthDate(post.week, post.day),
            media_url: mediaUrl,
            media_urls: mediaUrls,
            theme: post.theme,
            content_type: 'monthly',
            business_context: `Week: ${post.week}, Day: ${post.day}, Image Prompt: ${post.imagePrompt}`
          }
        })

      if (postsToSchedule.length === 0) {
        setError('No posts to schedule. Please generate content first.')
        return
      }

      const { error } = await supabase
        .from('posts')
        .insert(postsToSchedule)

      if (error) throw error

      setSuccess('Monthly content scheduled successfully!')
      setTimeout(() => {
        router.push('/calendar')
      }, 2000)
    } catch (error: any) {
      setError(error.message)
    } finally {
      setLoading(false)
    }
  }

  const getNextMonthDate = (week: number, day: number) => {
    const today = new Date()
    const nextMonth = new Date(today.getFullYear(), today.getMonth() + 1, 1)
    const dayOfMonth = (week - 1) * 7 + day
    nextMonth.setDate(dayOfMonth)
    return nextMonth.toISOString()
  }

  const getWeekPosts = (week: number) => {
    return posts.filter(post => post.week === week)
  }

  // Helper to get the next 30 real calendar days (local time)
  function formatScheduledDate(date: Date): string {
    const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
    const day = dayNames[date.getDay()];
    const month = monthNames[date.getMonth()];
    const dayNum = date.getDate();
    const year = date.getFullYear();
    const hours = date.getHours().toString().padStart(2, '0');
    const minutes = date.getMinutes().toString().padStart(2, '0');
    return `${day}, ${month} ${dayNum}, ${year} at ${hours}:${minutes}`;
  }

  const handleEnhanceImage = async (postId: string, imageUrl: string, caption: string, imageIndex: number) => {
    setEnhancingImage(prev => ({ 
      ...prev, 
      [postId]: { 
        ...(prev[postId] || {}), 
        [imageIndex]: true 
      } 
    }))
    setError('')

    try {
      // Convert image URL to file
      let imageFile: File
      
      if (imageUrl.startsWith('blob:')) {
        // For blob URLs, fetch the blob and create a file
        const response = await fetch(imageUrl)
        const blob = await response.blob()
        imageFile = new File([blob], 'image.jpg', { type: blob.type })
      } else if (imageUrl.startsWith('data:')) {
        // For data URLs, convert to blob and create file
        const response = await fetch(imageUrl)
        const blob = await response.blob()
        imageFile = new File([blob], 'image.jpg', { type: blob.type })
      } else {
        // For external URLs, fetch and create file
        const response = await fetch(imageUrl)
        const blob = await response.blob()
        imageFile = new File([blob], 'image.jpg', { type: blob.type })
      }

      // Create FormData and send file directly
      const formData = new FormData()
      formData.append('image', imageFile)
      formData.append('productDescription', caption)

      const response = await fetch('/api/enhance-image', {
        method: 'POST',
        body: formData
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || 'Failed to enhance image')
      }

      const data = await response.json()
      setEnhancedImages(prev => ({ 
        ...prev, 
        [postId]: { 
          ...(prev[postId] || {}), 
          [imageIndex]: data.enhancedImageUrl 
        } 
      }))
      setShowEnhancedImages(prev => ({ 
        ...prev, 
        [postId]: { 
          ...(prev[postId] || {}), 
          [imageIndex]: true 
        } 
      }))
      
      console.log('Image enhanced successfully:', data.enhancedImageUrl)
    } catch (error: any) {
      console.error('Error enhancing image:', error)
      setError(error.message || 'Failed to enhance image')
    } finally {
      setEnhancingImage(prev => ({ 
        ...prev, 
        [postId]: { 
          ...(prev[postId] || {}), 
          [imageIndex]: false 
        } 
      }))
    }
  }

  const handleResetImage = (postId: string, imageIndex: number) => {
    setShowEnhancedImages(prev => ({ 
      ...prev, 
      [postId]: { 
        ...(prev[postId] || {}), 
        [imageIndex]: false 
      } 
    }))
    setEnhancedImages(prev => {
      const newState = { ...prev }
      if (newState[postId]) {
        delete newState[postId][imageIndex]
        if (Object.keys(newState[postId]).length === 0) {
          delete newState[postId]
        }
      }
      return newState
    })
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-2 sm:px-4 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center">
              <Link href="/dashboard">
                <Button variant="ghost" size="sm">
                  <ArrowLeft className="h-4 w-4 mr-2" />
                  Back to Dashboard
                </Button>
              </Link>
            </div>
            
            <div className="flex items-center">
              <CalendarDays className="h-6 w-6 text-purple-600 mr-2" />
              <h1 className="text-lg sm:text-xl font-semibold text-gray-900">
                Monthly Content Generator
              </h1>
            </div>
          </div>
        </div>
      </header>

      <div className="max-w-7xl mx-auto px-2 sm:px-4 lg:px-8 py-6 sm:py-8">
        {error && (
          <div className="mb-4 p-3 sm:p-4 bg-red-50 border border-red-200 rounded-lg">
            <p className="text-red-800 text-xs sm:text-sm">{error}</p>
          </div>
        )}

        {success && (
          <div className="mb-4 p-3 sm:p-4 bg-green-50 border border-green-200 rounded-lg">
            <p className="text-green-800 text-xs sm:text-sm">{success}</p>
          </div>
        )}

        {/* Setup Section */}
        {/* Removed Monthly Content Strategy section for a cleaner UI */}
        
        {/* Image selection for each day of the month - Only show if content not generated */}
        {!contentGenerated && (
          <div className="bg-white rounded-lg shadow-sm border p-4 sm:p-6 mb-6 sm:mb-8">
            <h2 className="text-base sm:text-lg font-semibold text-gray-900 mb-3 sm:mb-4">Add Images for Each Day (Optional)</h2>
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2 sm:gap-4">
              {next30Days.map(({ dayName, date }, idx) => (
                <div key={date} className="flex flex-col items-center border rounded p-2 bg-gray-50">
                  <span className="font-medium text-gray-700 mb-1">{dayName}</span>
                  <span className="text-xs text-gray-500 mb-2">{date}</span>
                  {imageSelections[date] && imageSelections[date].length > 0 ? (
                    <div className="relative group mb-2 image-selected flex flex-wrap gap-1 justify-center">
                      {imageSelections[date].map((img, idx2) => (
                        <div key={img.id} className="relative">
                          <img src={img.file_path} alt={date} className="w-12 h-12 object-cover rounded shadow mb-1" />
                          <button
                            className="absolute top-0 right-0 bg-white bg-opacity-80 rounded-full p-0.5 text-red-500 hover:text-red-700 text-xs"
                            onClick={() => setImageSelections((prev) => ({
                              ...prev,
                              [date]: prev[date].filter((_, i) => i !== idx2)
                            }))}
                            aria-label="Remove image"
                          >
                            &times;
                          </button>
                        </div>
                      ))}
                      {imageSelections[date].length < 10 && (
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => setMediaModalDate(date)}
                          className="w-12 h-12 flex items-center justify-center"
                        >
                          <ImageIcon className="h-4 w-4" />
                          <span className="sr-only">Add Image</span>
                        </Button>
                      )}
                      {imageSelections[date].length > 1 && (
                        <span className="absolute bottom-0 left-0 bg-blue-600 text-white text-xs px-1 rounded">Carousel</span>
                      )}
                    </div>
                  ) : (
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => setMediaModalDate(date)}
                      className="w-full"
                    >
                      <ImageIcon className="h-4 w-4 mr-1" />Select Image
                    </Button>
                  )}
                </div>
              ))}
            </div>
            {/* Generate Content Button moved here */}
            <div className="mt-6 sm:mt-8 flex gap-2 sm:gap-3 justify-center">
              <Button
                onClick={generateMonthlyContent}
                disabled={Object.values(imageSelections).flat().length === 0}
                loading={generating}
                variant="primary"
                className="btn-generate"
              >
                <Sparkles className="h-4 w-4 mr-2" />
                {generating ? 'Generating Content...' : 'Generate Monthly Content'}
              </Button>
            </div>
            <div className="mt-3 text-xs sm:text-sm text-gray-600 text-center">
              {Object.values(imageSelections).flat().length === 0 ? (
                <span className="text-orange-600">⚠️ Please select at least one image to enable generation</span>
              ) : (
                <span className="text-green-600">✅ {Object.values(imageSelections).flat().length} image(s) selected</span>
              )}
            </div>
          </div>
        )}

        {/* Media Picker Modal */}
        {mediaModalDate && (
          <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40">
            <div className="bg-white rounded-lg shadow-lg max-w-4xl w-full p-6 relative animate-fade-in">
              <button
                className="absolute top-3 right-3 text-gray-400 hover:text-gray-600"
                onClick={() => {
                  setMediaModalDate(null)
                  setModalSelectedImages([])
                }}
                aria-label="Close"
              >
                &times;
              </button>
              <h3 className="text-lg font-bold mb-4">Select Images for {mediaModalDate} (Up to 10)</h3>
              
              {/* Selected Images Preview */}
              {modalSelectedImages.length > 0 && (
                <div className="mb-4 p-3 bg-gray-50 rounded-lg">
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-sm font-medium text-gray-700">Selected Images ({modalSelectedImages.length}/10)</span>
                    <button
                      onClick={() => setModalSelectedImages([])}
                      className="text-xs text-red-600 hover:text-red-800"
                    >
                      Clear All
                    </button>
                  </div>
                  <div className="flex flex-wrap gap-2">
                    {modalSelectedImages.map((img, idx) => (
                      <div key={img.id} className="relative">
                        <img src={img.file_path} alt={img.file_name} className="w-12 h-12 object-cover rounded" />
                        <button
                          onClick={() => setModalSelectedImages(prev => prev.filter((_, i) => i !== idx))}
                          className="absolute -top-1 -right-1 bg-red-500 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs"
                        >
                          ×
                        </button>
                      </div>
                    ))}
                  </div>
                </div>
              )}
              
              {mediaLoading ? (
                <div className="text-gray-500">Loading media...</div>
              ) : mediaError ? (
                <div className="text-red-500">{mediaError}</div>
              ) : (
                <div className="grid grid-cols-3 sm:grid-cols-4 md:grid-cols-6 gap-3 max-h-96 overflow-y-auto">
                  {Array.isArray(media) && media.filter(m => m && m.mime_type && m.mime_type.startsWith('image/')).map((item) => {
                    const isSelected = modalSelectedImages.some(img => img.id === item.id)
                    return (
                      <button
                        key={item.id}
                        className={`focus:outline-none border-2 rounded overflow-hidden transition-all ${
                          isSelected 
                            ? 'border-blue-500 bg-blue-50' 
                            : 'border-transparent hover:border-blue-300'
                        }`}
                        onClick={() => {
                          if (isSelected) {
                            setModalSelectedImages(prev => prev.filter(img => img.id !== item.id))
                          } else if (modalSelectedImages.length < 10) {
                            setModalSelectedImages(prev => [...prev, item])
                          }
                        }}
                      >
                        <img src={item.file_path} alt={item.file_name} className="w-full h-20 object-cover" />
                        {isSelected && (
                          <div className="absolute top-1 right-1 bg-blue-500 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs">
                            ✓
                          </div>
                        )}
                      </button>
                    )
                  })}
                  {(!Array.isArray(media) || (Array.isArray(media) && media.filter(m => m && m.mime_type && m.mime_type.startsWith('image/')).length === 0)) && (
                    <div className="col-span-full text-gray-500">No images found in your media library.</div>
                  )}
                </div>
              )}
              
              {/* Action Buttons */}
              <div className="mt-6 flex justify-end gap-3">
                <button
                  onClick={() => {
                    setMediaModalDate(null)
                    setModalSelectedImages([])
                  }}
                  className="px-4 py-2 text-gray-600 hover:text-gray-800"
                >
                  Cancel
                </button>
                <button
                  onClick={() => {
                    setImageSelections((prev) => ({
                      ...prev,
                      [mediaModalDate]: modalSelectedImages
                    }))
                    setMediaModalDate(null)
                    setModalSelectedImages([])
                  }}
                  disabled={modalSelectedImages.length === 0}
                  className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Add {modalSelectedImages.length} Image{modalSelectedImages.length !== 1 ? 's' : ''}
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Monthly Content Preview */}
        <div className="bg-white rounded-lg shadow-sm border p-6">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-lg font-medium text-gray-900">Monthly Content Preview</h2>
            {posts.some(p => p.status === 'generated') && (
              <div className="flex gap-3">
                <Button
                  onClick={saveMonthlyContent}
                  loading={loading}
                  variant="outline"
                >
                  <CheckCircle className="h-4 w-4 mr-2" />
                  Save as Draft
                </Button>
                <Button
                  onClick={scheduleMonthlyContent}
                  loading={loading}
                  className="bg-green-600 hover:bg-green-700"
                >
                  <Calendar className="h-4 w-4 mr-2" />
                  Schedule Posts
                </Button>
              </div>
            )}
          </div>

          {/* Generation Progress */}
          {generating && (
            <div className="mb-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
              <div className="flex items-center space-x-3">
                <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
                <div>
                  <p className="text-sm font-medium text-blue-900">Generating monthly content...</p>
                  <p className="text-xs text-blue-700">This may take a few moments. Please wait.</p>
                </div>
              </div>
            </div>
          )}

          {/* Weekly Breakdown */}
          <div className="space-y-8">
            {[1, 2, 3, 4].map((week) => (
              <div key={week} className="border border-gray-200 rounded-lg p-4">
                <h3 className="text-lg font-medium text-gray-900 mb-4">Week {week}</h3>
                <div className="space-y-6">
                  {getWeekPosts(week)
                    .filter(post => (post.selectedImages && post.selectedImages.length > 0) || post.selectedImage)
                    .map((post) => (
                    <div key={post.id} className="border border-gray-200 rounded-lg p-6 bg-white shadow-sm hover:shadow-md transition-shadow">
                      {/* Day and Date Header - Centered */}
                      <div className="text-center mb-6">
                        <div className="flex items-center justify-center gap-3 mb-2">
                          <h3 className="font-semibold text-gray-900 text-xl">Day {post.day}</h3>
                          <div className={`px-3 py-1 rounded-full text-xs font-medium ${post.status === 'generated' ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-600'}`}>
                            {post.status === 'generated' ? 'Generated' : 'Pending'}
                          </div>
                        </div>
                        <p className="text-sm text-gray-500">
                          {post.scheduledFor ? formatScheduledDate(new Date(post.scheduledFor)) : 'Not scheduled'}
                        </p>
                      </div>
                      
                      {/* Images Section - Centered or Left-to-Right */}
                      <div className="mb-6">
                        {post.selectedImages && post.selectedImages.length > 0 ? (
                          // Multiple images - arrange left to right, centered
                          <div className="flex justify-center">
                            <div className="flex gap-4">
                              {post.selectedImages.map((img, idx) => (
                                <div key={img.id || idx} className="relative">
                                  <div className="w-64 h-80 bg-gray-100 border border-gray-200 rounded-lg overflow-hidden">
                                    <img
                                      src={showEnhancedImages[post.id]?.[idx] && enhancedImages[post.id]?.[idx] ? enhancedImages[post.id][idx] : img.file_path}
                                      alt={`Preview ${idx + 1}`}
                                      className="w-full h-full object-cover"
                                    />
                                    {/* Enhancement Button */}
                                    <div className="absolute top-2 left-2">
                                      {!showEnhancedImages[post.id]?.[idx] ? (
                                        <button
                                          onClick={() => handleEnhanceImage(post.id, img.file_path, post.caption, idx)}
                                          disabled={enhancingImage[post.id]?.[idx]}
                                          className="bg-gradient-to-r from-purple-500 to-blue-500 hover:from-purple-600 hover:to-blue-600 text-white text-sm px-3 py-1.5 rounded shadow-lg disabled:opacity-50"
                                        >
                                          {enhancingImage[post.id]?.[idx] ? 'Enhancing...' : 'Enhance'}
                                        </button>
                                      ) : (
                                        <button
                                          onClick={() => handleResetImage(post.id, idx)}
                                          className="bg-gray-600 hover:bg-gray-700 text-white text-sm px-3 py-1.5 rounded shadow-lg"
                                        >
                                          Reset
                                        </button>
                                      )}
                                    </div>
                                  </div>
                                </div>
                              ))}
                            </div>
                          </div>
                        ) : post.selectedImage ? (
                          // Single image - center it
                          <div className="flex justify-center">
                            <div className="relative">
                              <div className="w-64 h-80 bg-gray-100 border border-gray-200 rounded-lg overflow-hidden">
                                <img
                                  src={showEnhancedImages[post.id]?.[0] && enhancedImages[post.id]?.[0] ? enhancedImages[post.id][0] : post.selectedImage.file_path}
                                  alt="Selected"
                                  className="w-full h-full object-cover"
                                />
                                {/* Enhancement Button */}
                                <div className="absolute top-2 left-2">
                                  {!showEnhancedImages[post.id]?.[0] ? (
                                    <button
                                      onClick={() => handleEnhanceImage(post.id, post.selectedImage.file_path, post.caption, 0)}
                                      disabled={enhancingImage[post.id]?.[0]}
                                      className="bg-gradient-to-r from-purple-500 to-blue-500 hover:from-purple-600 hover:to-blue-600 text-white text-sm px-3 py-1.5 rounded shadow-lg disabled:opacity-50"
                                    >
                                      {enhancingImage[post.id]?.[0] ? 'Enhancing...' : 'Enhance'}
                                    </button>
                                  ) : (
                                    <button
                                      onClick={() => handleResetImage(post.id, 0)}
                                      className="bg-gray-600 hover:bg-gray-700 text-white text-sm px-3 py-1.5 rounded shadow-lg"
                                    >
                                      Reset
                                    </button>
                                  )}
                                </div>
                              </div>
                            </div>
                          </div>
                        ) : (
                          // No images
                          <div className="flex justify-center">
                            <div className="w-64 h-80 bg-gray-50 border border-gray-200 rounded-lg flex items-center justify-center">
                              <span className="text-gray-400 text-sm">No images selected</span>
                            </div>
                          </div>
                        )}
                      </div>
                      
                      {/* Content Details - Centered and Larger */}
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 text-center">
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">Caption</label>
                          {editingPost !== post.id && (
                            <button onClick={() => startEditing(post.id, post.caption, post.hashtags)} className="text-xs text-blue-600 hover:text-blue-800">Edit</button>
                          )}
                          {editingPost === post.id ? (
                            <textarea value={editCaption} onChange={(e) => setEditCaption(e.target.value)} className="w-full p-2 border border-gray-300 rounded mb-2 text-sm" rows={3} />
                          ) : (
                            <p className="text-sm text-gray-900 whitespace-pre-line">{post.caption}</p>
                          )}
                        </div>
                        
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">Hashtags</label>
                          {editingPost !== post.id && (
                            <button onClick={() => startEditing(post.id, post.caption, post.hashtags)} className="text-xs text-blue-600 hover:text-blue-800">Edit</button>
                          )}
                          {editingPost === post.id ? (
                            <Input value={editHashtags} onChange={(e) => setEditHashtags(e.target.value)} className="w-full p-2 border border-gray-300 rounded mb-2 text-sm" />
                          ) : (
                            <p className="text-sm text-gray-900 whitespace-pre-line">{post.hashtags && post.hashtags.length > 0 ? post.hashtags.map(tag => `#${tag}`).join(' ') : ''}</p>
                          )}
                        </div>

                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">Scheduled For</label>
                          {editingPost !== post.id && (
                            <button onClick={() => startEditing(post.id, post.caption, post.hashtags, post.scheduledFor)} className="text-xs text-blue-600 hover:text-blue-800">Edit</button>
                          )}
                          {editingPost === post.id ? (
                            <input
                              type="datetime-local"
                              value={editScheduledFor ? editScheduledFor : (post.scheduledFor ? new Date(post.scheduledFor).toISOString().slice(0, 16) : '')}
                              onChange={e => setEditScheduledFor(e.target.value)}
                              className="w-full p-2 border border-gray-300 rounded mb-2 text-sm"
                            />
                          ) : (
                            <p className="text-sm text-gray-900">{post.scheduledFor ? formatScheduledDate(new Date(post.scheduledFor)) : 'Not scheduled'}</p>
                          )}
                        </div>
                      </div>
                           
                      {/* Caption Section */}
                      <div>
                        <div className="flex items-center justify-between mb-1">
                          <span className="text-xs text-gray-600">Caption</span>
                          {editingPost !== post.id && (
                            <button
                              onClick={() => startEditing(post.id, post.caption, post.hashtags)}
                              className="text-xs text-blue-600 hover:text-blue-800"
                            >
                              Edit
                            </button>
                          )}
                        </div>
                        {editingPost === post.id ? (
                          <textarea
                            value={editCaption}
                            onChange={(e) => setEditCaption(e.target.value)}
                            className="w-full text-xs border border-gray-300 rounded px-1 py-1 focus:outline-none focus:ring-1 focus:ring-blue-500"
                            rows={2}
                            placeholder="Enter caption..."
                          />
                        ) : (
                          <p className="text-xs text-gray-600 line-clamp-2">{post.caption}</p>
                        )}
                      </div>

                      {/* Scheduled For Section (editable) */}
                      <div>
                        <div className="flex items-center justify-between mb-1">
                          <span className="text-xs text-gray-600">Scheduled For</span>
                          {editingPost !== post.id && (
                            <button onClick={() => startEditing(post.id, post.caption, post.hashtags, post.scheduledFor)} className="text-xs text-blue-600 hover:text-blue-800">Edit</button>
                          )}
                        </div>
                        {editingPost === post.id ? (
                          <input
                            type="datetime-local"
                            value={editScheduledFor ? editScheduledFor : (post.scheduledFor ? new Date(post.scheduledFor).toISOString().slice(0, 16) : '')}
                            onChange={e => setEditScheduledFor(e.target.value)}
                            className="w-full p-2 border border-gray-300 rounded mb-2 text-xs"
                          />
                        ) : (
                          <p className="text-sm text-gray-900">{post.scheduledFor ? formatScheduledDate(new Date(post.scheduledFor)) : 'Not scheduled'}</p>
                        )}
                      </div>

                      {/* Hashtags Section */}
                      <div>
                        <div className="flex items-center justify-between mb-1">
                          <span className="text-xs text-gray-600">Hashtags</span>
                          {editingPost !== post.id && (
                            <button
                              onClick={() => startEditing(post.id, post.caption, post.hashtags)}
                              className="text-xs text-blue-600 hover:text-blue-800"
                            >
                              Edit
                            </button>
                          )}
                        </div>
                        {editingPost === post.id ? (
                          <input
                            type="text"
                            value={editHashtags}
                            onChange={(e) => setEditHashtags(e.target.value)}
                            className="w-full text-xs border border-gray-300 rounded px-1 py-1 focus:outline-none focus:ring-1 focus:ring-blue-500"
                            placeholder="Enter hashtags..."
                          />
                        ) : (
                          <div className="flex flex-wrap gap-1">
                            {post.hashtags.slice(0, 2).map((tag, index) => (
                              <span key={index} className="text-xs bg-blue-100 text-blue-800 px-1 rounded">
                                {tag.startsWith('#') ? tag : `#${tag}`}
                              </span>
                            ))}
                          </div>
                        )}
                      </div>

                      {editingPost === post.id && (
                        <div className="flex gap-1 pt-1">
                          <button
                            onClick={() => saveEdit(post.id)}
                            className="text-xs bg-green-600 text-white px-2 py-1 rounded hover:bg-green-700"
                          >
                            Save
                          </button>
                          <button
                            onClick={cancelEdit}
                            className="text-xs bg-gray-600 text-white px-2 py-1 rounded hover:bg-gray-700"
                          >
                            Cancel
                          </button>
                        </div>
                      )}
                    </div>
                  ) : (
                    <div className="text-center py-4">
                      <Clock className="h-4 w-4 mx-auto text-gray-400 mb-1" />
                      <p className="text-xs text-gray-500">Pending</p>
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}